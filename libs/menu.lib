#!/bin/bash
#-------------------------------------------------------------------------------
#Created by lunixer mailto: lunixer[at]zoho[dot]com
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------

#!/bin/bash
#-------------------------------------------------------------------------------
#Created by lunixer mailto: lunixer[at]zoho[dot]com
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------


MX_ManjaroEx_File="$Mx_Dir/user_settings.cfg"

#Application Menu actions
mx_menu_action_finish(){ #{{{
  clear
  print_title "$MX_lang_main_finish_title"
  mx_dolog " menu -> main -> display end screen."
  if [[ $MX_Config_statusInstall == 1 ]]; then
    print_info "$MX_lang_main_finish_infoCanceled"
    print_text "$MX_lang_main_finish_infoTextCanceled"
    mx_dolog " END -> quit script by user."
  else
    print_info "$MX_lang_main_finish_infoFinish"
    print_text "$MX_lang_main_finish_infoText"
  fi
  print_text "$MX_lang_main_finish_extraThanks"
  print_footer
  print_line
  #REBOOT
  #read -p "Reboot your system [y/N]: " OPTION
  #[[ $OPTION == y ]] && reboot
  exit 1
  #}}}
}

#Application menu functions
mx_menu_action_setLocales() { #{{{
  MX_lang_set_default=1
  mx_dolog " menu -> main -> display language menu."
  while true
  do
    print_title "$MX_lang_main_lang_title"
    print_info "$MX_lang_main_lang_info"
    echo " 1) $(mainmenu_item "${checklist[11]}" "Deutsch (de_DE)")"
    echo " 2) $(mainmenu_item "${checklist[12]}" "English (en_US)")"
    echo ""
    echo " b) Back"
    echo ""
    #print_footer
    print_line
    LANGMENU+=" b"

    read_input_options "$LANGMENU"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          mx_dolog " menu -> main -> action -> select language de."
          checklist[11]=1
          checklist[12]=0
          MX_lang_set_default=0
          MX_Config_DefaultLang=de
          mx_lang_load
          ;;
        2)
          mx_dolog " menu -> main -> action -> select language en."
          checklist[12]=1
          checklist[11]=0
          MX_lang_set_default=0
          MX_Config_DefaultLang=en
          mx_lang_load
          ;;
        "b")
          if [[ ${MX_lang_set_default} -eq 1 ]]; then
            checklist[11]=0
            mx_lang_load
            mx_dolog " language -> no language selected, using en_US as default."
          fi
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    [[ $OPT == b || $OPT == d ]] && break;
  done
  #}}}
}

#Application Menu
mx_menu_main() {

  clear

  while true
  do
    mx_dolog " menu -> main -> display main menu."
    print_title "$MX_lang_main_title"
    print_info "$MX_lang_main_info"
    echo " 1) $(mainmenu_item "${checklist[1]}" "${MX_lang_main_menu_item_1}")"
    echo " 2) $(mainmenu_item "${checklist[2]}" "$MX_lang_main_menu_item_2")"
    echo " 3) $(mainmenu_item "${checklist[3]}" "$MX_lang_main_menu_item_3")"
    echo ""
    echo " 4) $(mainmenu_item "${checklist[4]}" "$MX_lang_main_menu_item_4")"
    echo " 5) $(mainmenu_item "${checklist[5]}" "$MX_lang_main_menu_item_5")"
    echo " 6) $(mainmenu_item "${checklist[6]}" "$MX_lang_main_menu_item_6")"
    echo ""
    echo " 7) $(mainmenu_item "${checklist[7]}" "$MX_lang_main_menu_item_7")"
    #echo " 8) $(mainmenu_item "${checklist[8]}" "$MX_lang_main_menu_item_8")"
    echo ""
    echo " q) Quit $MX_lang_main_menu_item_0"
    echo ""
    print_footer
    print_line
    MAINMENU+=" q"
    read_input_options "$MAINMENU"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          mx_dolog " menu -> main -> action -> select language."
          checklist[1]=1
          mx_menu_action_setLocales
          ;;
        2)
          checklist[2]=1
          mx_main_setProfile
          ;;
        3)
          mx_main_setProfile
          checklist[3]=1
          ;;
        4)
          mx_main_setProfile
          checklist[4]=1
          ;;
        5)
          mx_main_autoInstall
          checklist[5]=1
          ;;
        6)
          mx_dolog " menu -> main -> action -> select autoinstall."
          mx_menu_action_autoInstall
          checklist[6]=1
          ;;
        "q")
          mx_dolog " menu -> main -> action -> select quit."
          mx_menu_action_finish
          ;;
        *)
          invalid_option
          ;;
          esac
        done
      done

}

mx_menu_action_autoInstall() { #{{{
  mx_dolog " menu -> main -> display autoinstall."
  while true
  do
    print_title "$MX_lang_main_auto_title"
    print_info "$MX_lang_main_auto_info"
    echo " 1) $(mainmenu_item "${checklist[21]}" "Standard install")"
    echo " 2) $(mainmenu_item "${checklist[22]}" "Extended install (select for more info)")"
    echo " 3) $(mainmenu_item "${checklist[23]}" "Minimal install")"
    echo " 4) $(mainmenu_item "${checklist[24]}" "Server install")"
    echo ""
    echo " b) Back"
    echo ""
    print_line
    LANGMENU+=" b"

    read_input_options "$LANGMENU"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
        ;;
        2)
        ;;
        3)
        ;;
        4)
        ;;
        "b")
        ;;
        *)
          invalid_option
        ;;
      esac
    done
    [[ $OPT == b || $OPT == d ]] && break;
  done
  #}}}
}



read_input_options() { #{{{
    local line
    local packages
      read -p "$prompt2" OPTION
      array=("$OPTION")
    for line in ${array[@]/,/ }; do
      if [[ ${line/-/} != $line ]]; then
        for ((i=${line%-*}; i<=${line#*-}; i++)); do
          packages+=($i);
        done
      else
        packages+=($line)
      fi
    done
    OPTIONS=("${packages[@]}")
  } #}}}

checkbox() { #{{{
      #display [X] or [ ]
      [[ "$1" -eq 1 ]] && echo -e "${BBlue}[${Reset}${Bold}X${BBlue}]${Reset}" || echo -e "${BBlue}[ ${BBlue}]${Reset}";
    } #}}}
checkbox_package() { #{{{
      #check if [X] or [ ]
      is_package_installed "$1" && checkbox 1 || checkbox 0
    } #}}}

menu_item() { #{{{
    #check if the number of arguments is less then 2
    [[ $# -lt 2 ]] && _package_name="$1" || _package_name="$2";
    #list of chars to remove from the package name
    local _chars=("Ttf-" "-bzr" "-hg" "-svn" "-git" "-stable" "-icon-theme" "Gnome-shell-theme-" "Gnome-shell-extension-");
    #remove chars from package name
    for char in ${_chars[@]}; do _package_name=`echo ${_package_name^} | sed 's/'$char'//'`; done
    #display checkbox and package name
    echo -e "$(checkbox_package "$1") ${Bold}${_package_name}${Reset}"
  } #}}}

  mainmenu_item() { #{{{
    #if the task is done make sure we get the state
    if [ $1 == 1 -a "$3" != "" ]; then
      state="${BGreen}[${Reset}$3${BGreen}]${Reset}"
    fi
    echo -e "$(checkbox "$1") ${Bold}$2${Reset} ${state}"
  } #}}}

  invalid_option() { #{{{
    print_line
    echo "Invalid option. Try another one."
    pause_function
  } #}}}
