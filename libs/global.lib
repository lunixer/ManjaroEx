#!/bin/bash
#-------------------------------------------------------------------------------
#Created by lunixer mailto: lunixer[at]zoho[dot]com
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------

#GLOBAL VARIABLES {{{
  checklist=( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )
  # COLORS {{{
    Bold=$(tput bold)
    Underline=$(tput sgr 0 1)
    Reset=$(tput sgr0)
  # Regular Colors
    Red=$(tput setaf 1)
    Green=$(tput setaf 2)
    Yellow=$(tput setaf 3)
    Blue=$(tput setaf 4)
    Purple=$(tput setaf 5)
    Cyan=$(tput setaf 6)
    White=$(tput setaf 7)
  # Bold
    BRed=${Bold}$(tput setaf 1)
    BGreen=${Bold}$(tput setaf 2)
    BYellow=${Bold}$(tput setaf 3)
    BBlue=${Bold}$(tput setaf 4)
    BPurple=${Bold}$(tput setaf 5)
    BCyan=${Bold}$(tput setaf 6)
    BWhite=${Bold}$(tput setaf 7)
#}}}

# DEFAULT PROMPT {{{
    prompt1="Enter your option: "
    prompt2="Enter nÂ° of options (ex: 1 2 3 or 1-3): "
    prompt3="You have to manually enter the following commands, then press ${BYellow}ctrl+d${Reset} or type ${BYellow}exit${Reset}:"
#}}}

# DEFAULT EDITOR {{{
    if [[ -f /usr/bin/vim ]]; then
      MX_Default_Editor="vim"
    elif [[ -z $EDITOR ]]; then
      MX_Default_Editor="nano"
    fi
#}}}

export $DESKTOP_SESSION

# DEFAULT FUCTIONS

  pause_function() { #{{{
      print_line
      if [[ $AUTOMATIC_MODE -eq 0 ]]; then
        read -e -sn 1 -p "Press enter to continue..."
      fi
    } #}}}

  print_line() { #{{{
      printf "%$(tput cols)s\n"|tr ' ' '-'
  } #}}}

  print_title() { #{{{
      clear
      print_line
      echo -e "# ${Bold}$1${Reset}"
      print_line
      echo ""
  } #}}}

  print_info() { #{{{
      #Console width number
      T_COLS=`tput cols`
      echo -e "${Bold}$1${Reset}\n" | fold -sw $(( $T_COLS - 18 )) | sed 's/^/\t/'
  } #}}}

  print_text() { #{{{
      #Console width number
      T_COLS=`tput cols`
      echo -e "$1${Reset}\n" | fold -sw $(( $T_COLS - 5 )) | sed 's/^/\t/'
  } #}}}

  print_warning() { #{{{
      T_COLS=`tput cols`
      echo -e "${BYellow}$1${Reset}\n" | fold -sw $(( $T_COLS - 1 ))
  } #}}}

  print_danger() { #{{{
      T_COLS=`tput cols`
      echo -e "${BRed}$1${Reset}\n" | fold -sw $(( $T_COLS - 1 ))
  } #}}}

  print_footer() { #{{{
    print_line
    echo "${Bold}${White} -> Author : ${Reset}${MX_ProjectAuthor}"
    echo "${Bold}${White} -> Version: ${Reset}${MX_ProjectVersion}"
    echo "${Bold}${White} -> GitHub Report: ${Reset}${MX_ProjectUrl}"
  } #}}}

  mx_error_msg() { #{{{
    local _msg="${1}"
    clear
    print_title "${Bold}${Yellow}ManjaroEx ${Purple}Install script by ${Green}lunixer${Reset}"
    print_info "${Bold}${White}Error:${Reset}"
    print_text "${Red}${_msg}"
    print_text "${Green}For additional help go to installer Wiki ${White}https://github.com/lunixer/ManjaroEx/wiki${Reset}"
    print_footer
    print_line
    exit 1
  } #}}}

  cecho() { #{{{
    echo -e "$1"
    echo -e "$1" >>"$LOG"
    tput sgr0;
  } #}}}

  ncecho() { #{{{
    echo -ne "$1"
    echo -ne "$1" >>"$LOG"
    tput sgr0
  } #}}}

  spinny() { #{{{
    echo -ne "\b${SPIN:i++%${#SPIN}:1}"
  } #}}}

  progress() { #{{{
    ncecho "  ";
    while true; do
      kill -0 $pid &> /dev/null;
        if [[ $? == 0 ]]; then
          spinny
          sleep 0.25
        else
          ncecho "\b\b";
          wait $pid
          retcode=$?
          echo -ne "$pid's retcode: $retcode" >> $LOG
          if [[ $retcode == 0 ]] || [[ $retcode == 255 ]]; then
            cecho success
          else
            cecho failed
            echo -e "$PKG" >> $PKG_FAIL
            tail -n 15 $LOG
        fi
          break
        fi
      done
    } #}}}

  if [[ -e /etc/lsb-release ]]; then
    source /etc/lsb-release
  else
    mx_error_msg "Missing file: lsb-release in /etc/. This package is required, you can use the command\n ${White}'sudo pacman -S lsb-release'${Red}, to install it."
  fi

  #CLEAN ORPHAN PACKAGES {{{
  clean_orphan_packages(){
    print_title "CLEAN ORPHAN PACKAGES"
    pacman -Rsc --noconfirm $(pacman -Qqdt)
    #pacman -Sc --noconfirm
    pacman-optimize
  }
  #}}}
  #RECONFIGURE SYSTEM {{{
  reconfigure_system(){
    print_title "KEYMAP - https://wiki.archlinux.org/index.php/KEYMAP"
    print_info "The KEYMAP variable is specified in the /etc/rc.conf file. It defines what keymap the keyboard is in the virtual consoles. Keytable files are provided by the kbd package."
    OPTION=n
    while [[ $OPTION != y ]]; do
      getkeymap
      read_input_text "Confirm keymap: $KEYMAP"
    done
    localectl set-keymap ${KEYMAP}

    print_title "HOSTNAME - https://wiki.archlinux.org/index.php/HOSTNAME"
    print_info "A host name is a unique name created to identify a machine on a network.Host names are restricted to alphanumeric characters.\nThe hyphen (-) can be used, but a host name cannot start or end with it. Length is restricted to 63 characters."
    read -p "Hostname [ex: archlinux]: " HN
    hostnamectl set-hostname $HN

    print_title "TIMEZONE - https://wiki.archlinux.org/index.php/Timezone"
    print_info "In an operating system the time (clock) is determined by four parts: Time value, Time standard, Time Zone, and DST (Daylight Saving Time if applicable)."
    OPTION=n
    while [[ $OPTION != y ]]; do
      settimezone
      read_input_text "Confirm timezone ($ZONE/$SUBZONE)"
    done
    timedatectl set-timezone ${ZONE}/${SUBZONE}

    print_title "HARDWARE CLOCK TIME - https://wiki.archlinux.org/index.php/Internationalization"
    print_info "This is set in /etc/adjtime. Set the hardware clock mode uniformly between your operating systems on the same machine. Otherwise, they will overwrite the time and cause clock shifts (which can cause time drift correction to be miscalibrated)."
    hwclock_list=('UTC' 'Localtime');
    PS3="$prompt1"
    select OPT in "${hwclock_list[@]}"; do
      case "$REPLY" in
        1)
          timedatectl set-local-rtc false
          ;;
        2)
          timedatectl set-local-rtc true
          ;;
        *) invalid_option ;;
      esac
      [[ -n $OPT ]] && break
    done
    timedatectl set-ntp true
  }
  #}}}
